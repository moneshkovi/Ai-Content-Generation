{"ast":null,"code":"import axios from 'axios';\n\n/**\n * API Service for handling all backend API interactions\n */\nclass ApiService {\n  /**\n   * Generate content using the provided prompt and options\n   * @param {string} prompt - The prompt for content generation\n   * @param {string} contentType - Type of content (blog, social, product, etc.)\n   * @param {Object} options - Optional parameters for generation\n   * @returns {Promise} - Promise with the API response\n   */\n  static generateContent(prompt, contentType = 'general', options = {}) {\n    return axios.post('/api/content/generate', {\n      prompt,\n      content_type: contentType,\n      options\n    });\n  }\n\n  /**\n   * Generate content using a predefined template\n   * @param {string} templateName - Name of the template to use\n   * @param {Object} templateVars - Variables to inject into the template\n   * @param {string} contentType - Type of content being generated\n   * @param {Object} options - Optional parameters for generation\n   * @returns {Promise} - Promise with the API response\n   */\n  static generateFromTemplate(templateName, templateVars, contentType, options = {}) {\n    return axios.post('/api/content/generate-from-template', {\n      template_name: templateName,\n      template_vars: templateVars,\n      content_type: contentType,\n      options\n    });\n  }\n\n  /**\n   * Save content to storage\n   * @param {Object} contentData - Content data to save\n   * @param {string} contentType - Type of content (blog, social, product, etc.)\n   * @returns {Promise} - Promise with the API response\n   */\n  static saveContent(contentData, contentType = 'general') {\n    return axios.post('/api/storage/save', {\n      content: contentData,\n      content_type: contentType\n    });\n  }\n\n  /**\n   * Retrieve content from storage\n   * @param {string} filepath - Path to the content file\n   * @param {boolean} isS3Path - Whether the filepath is an S3 path\n   * @returns {Promise} - Promise with the API response\n   */\n  static retrieveContent(filepath, isS3Path = false) {\n    return axios.get(`/api/storage/retrieve/${filepath}`, {\n      params: {\n        is_s3_path: isS3Path\n      }\n    });\n  }\n\n  /**\n   * List available content with optional filters\n   * @param {string} contentType - Type of content to filter by\n   * @param {string} startDate - ISO date string for start date filter\n   * @param {string} endDate - ISO date string for end date filter\n   * @param {number} limit - Maximum number of items to return\n   * @returns {Promise} - Promise with the API response\n   */\n  static listContent(contentType = null, startDate = null, endDate = null, limit = 100) {\n    const params = new URLSearchParams();\n    if (contentType) params.append('content_type', contentType);\n    if (startDate) params.append('start_date', startDate);\n    if (endDate) params.append('end_date', endDate);\n    if (limit !== 100) params.append('limit', limit.toString());\n    return axios.get(`/api/storage/list?${params.toString()}`);\n  }\n}\nexport default ApiService;","map":{"version":3,"names":["axios","ApiService","generateContent","prompt","contentType","options","post","content_type","generateFromTemplate","templateName","templateVars","template_name","template_vars","saveContent","contentData","content","retrieveContent","filepath","isS3Path","get","params","is_s3_path","listContent","startDate","endDate","limit","URLSearchParams","append","toString"],"sources":["/home/tron/Ai Content Generation/frontend/src/services/api.service.js"],"sourcesContent":["import axios from 'axios';\n\n/**\n * API Service for handling all backend API interactions\n */\nclass ApiService {\n  /**\n   * Generate content using the provided prompt and options\n   * @param {string} prompt - The prompt for content generation\n   * @param {string} contentType - Type of content (blog, social, product, etc.)\n   * @param {Object} options - Optional parameters for generation\n   * @returns {Promise} - Promise with the API response\n   */\n  static generateContent(prompt, contentType = 'general', options = {}) {\n    return axios.post('/api/content/generate', {\n      prompt,\n      content_type: contentType,\n      options\n    });\n  }\n\n  /**\n   * Generate content using a predefined template\n   * @param {string} templateName - Name of the template to use\n   * @param {Object} templateVars - Variables to inject into the template\n   * @param {string} contentType - Type of content being generated\n   * @param {Object} options - Optional parameters for generation\n   * @returns {Promise} - Promise with the API response\n   */\n  static generateFromTemplate(templateName, templateVars, contentType, options = {}) {\n    return axios.post('/api/content/generate-from-template', {\n      template_name: templateName,\n      template_vars: templateVars,\n      content_type: contentType,\n      options\n    });\n  }\n\n  /**\n   * Save content to storage\n   * @param {Object} contentData - Content data to save\n   * @param {string} contentType - Type of content (blog, social, product, etc.)\n   * @returns {Promise} - Promise with the API response\n   */\n  static saveContent(contentData, contentType = 'general') {\n    return axios.post('/api/storage/save', {\n      content: contentData,\n      content_type: contentType\n    });\n  }\n\n  /**\n   * Retrieve content from storage\n   * @param {string} filepath - Path to the content file\n   * @param {boolean} isS3Path - Whether the filepath is an S3 path\n   * @returns {Promise} - Promise with the API response\n   */\n  static retrieveContent(filepath, isS3Path = false) {\n    return axios.get(`/api/storage/retrieve/${filepath}`, {\n      params: { is_s3_path: isS3Path }\n    });\n  }\n\n  /**\n   * List available content with optional filters\n   * @param {string} contentType - Type of content to filter by\n   * @param {string} startDate - ISO date string for start date filter\n   * @param {string} endDate - ISO date string for end date filter\n   * @param {number} limit - Maximum number of items to return\n   * @returns {Promise} - Promise with the API response\n   */\n  static listContent(contentType = null, startDate = null, endDate = null, limit = 100) {\n    const params = new URLSearchParams();\n    if (contentType) params.append('content_type', contentType);\n    if (startDate) params.append('start_date', startDate);\n    if (endDate) params.append('end_date', endDate);\n    if (limit !== 100) params.append('limit', limit.toString());\n    \n    return axios.get(`/api/storage/list?${params.toString()}`);\n  }\n}\n\nexport default ApiService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA,MAAMC,UAAU,CAAC;EACf;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,eAAeA,CAACC,MAAM,EAAEC,WAAW,GAAG,SAAS,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpE,OAAOL,KAAK,CAACM,IAAI,CAAC,uBAAuB,EAAE;MACzCH,MAAM;MACNI,YAAY,EAAEH,WAAW;MACzBC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOG,oBAAoBA,CAACC,YAAY,EAAEC,YAAY,EAAEN,WAAW,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjF,OAAOL,KAAK,CAACM,IAAI,CAAC,qCAAqC,EAAE;MACvDK,aAAa,EAAEF,YAAY;MAC3BG,aAAa,EAAEF,YAAY;MAC3BH,YAAY,EAAEH,WAAW;MACzBC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOQ,WAAWA,CAACC,WAAW,EAAEV,WAAW,GAAG,SAAS,EAAE;IACvD,OAAOJ,KAAK,CAACM,IAAI,CAAC,mBAAmB,EAAE;MACrCS,OAAO,EAAED,WAAW;MACpBP,YAAY,EAAEH;IAChB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOY,eAAeA,CAACC,QAAQ,EAAEC,QAAQ,GAAG,KAAK,EAAE;IACjD,OAAOlB,KAAK,CAACmB,GAAG,CAAC,yBAAyBF,QAAQ,EAAE,EAAE;MACpDG,MAAM,EAAE;QAAEC,UAAU,EAAEH;MAAS;IACjC,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOI,WAAWA,CAAClB,WAAW,GAAG,IAAI,EAAEmB,SAAS,GAAG,IAAI,EAAEC,OAAO,GAAG,IAAI,EAAEC,KAAK,GAAG,GAAG,EAAE;IACpF,MAAML,MAAM,GAAG,IAAIM,eAAe,CAAC,CAAC;IACpC,IAAItB,WAAW,EAAEgB,MAAM,CAACO,MAAM,CAAC,cAAc,EAAEvB,WAAW,CAAC;IAC3D,IAAImB,SAAS,EAAEH,MAAM,CAACO,MAAM,CAAC,YAAY,EAAEJ,SAAS,CAAC;IACrD,IAAIC,OAAO,EAAEJ,MAAM,CAACO,MAAM,CAAC,UAAU,EAAEH,OAAO,CAAC;IAC/C,IAAIC,KAAK,KAAK,GAAG,EAAEL,MAAM,CAACO,MAAM,CAAC,OAAO,EAAEF,KAAK,CAACG,QAAQ,CAAC,CAAC,CAAC;IAE3D,OAAO5B,KAAK,CAACmB,GAAG,CAAC,qBAAqBC,MAAM,CAACQ,QAAQ,CAAC,CAAC,EAAE,CAAC;EAC5D;AACF;AAEA,eAAe3B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}